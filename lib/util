#
#  Bash Util
# --------------- -  *
#  update: 2022-10-12
#  author: Satoshi Soma (https://amekusa.com)
# ============================================

_error() {
	[ -z "$1" ] || echo "ERROR: $1"
	exit 1
}

_if() {
	local eval=false
	if [ "$1" = "-e" ] || [ "$1" = "eval" ]; then eval=true; shift; fi
	local t; local f
	local mode=0
	local cond=("$1")
	while shift; do
		if [ "$1" = "?" ]; then
			t="$2"
			[ "$3" = ":" ] && f="$4"
			mode=1; break;
		elif [ "$1" = "?:" ]; then
			f="$2"
			mode=2; break;
		fi
		cond[${#cond[@]}]="$1"
	done
	[ $mode -eq 0 ] && _error "syntax error ( _if <cond> ? <A> : <B> )"
	if $eval; then
		if [ $(eval "${cond[@]}")$? -eq 0 ]; then echo "$t"; else echo "$f"; fi
	else
		if [ $("${cond[@]}")$? -eq 0 ]; then echo "$t"; else echo "$f"; fi
	fi
}

_fb() {
	local i
	for i in "$@"; do
		if [ -n "$i" ]; then
			echo "$i"
			return
		fi
	done
	return 1
}

_chk-user() {
	[ "$(whoami)" = "$1" ] || _error "run as $1"
}

_chk-cmd() {
	local i
	local x
	for i in "$@"; do
		x="$(which $i)" || _error "$i is not found"
	done
}

_subst() {
	local arg name value pat
	for arg in "$@"; do
		name="${arg%%=*}"
		value="${arg:$((${#name}+1))}"
		pat="${pat}s|{{ $name }}|$value|g;"
	done
	sed "$pat"
}

_file() {
	local path="$1"; shift
	local dir=false
	local mod own
	while [ "$#" -gt 0 ]; do
		case "$1" in
			-d|--dir) dir=true; shift ;;
			-m|--mod) mod="$2"; shift; shift ;;
			-o|--own) own="$2"; shift; shift ;;
			*) $echo || echo "_file: invalid argument: $1"; return 1
		esac
	done
	if $dir
		then [ -d "$path" ] || mkdir "$path" || return 1
		else [ -f "$path" ] || touch "$path" || return 1
	fi
	[ -z "$mod" ] || chmod "$mod" "$path" || return 2
	[ -z "$own" ] || chown "$own" "$path" || return 2
	return 0
}

_dir() {
	_file "$@" -d
}

_uncomment() {
	local search="$1"; shift
	local file="$1"; shift
	local expr="/${search}/ s/^#+\s*//"
	if [ -n "$file" ]
		then sed -ri "$expr" "$file"
		else sed -r "$expr"
	fi
}

_save-var() {
	local key="$1"; shift
	local value="$1"; shift
	local file="$1"; shift
	[ -f "$file" ] || touch "$file"
	local temp="$(mktemp)"
	local find="^([[:space:]]*)$key="
	local found=false
	local line
	while IFS= read -r line; do
		if [[ $line =~ $find ]]; then
			line="${BASH_REMATCH[1]}$key=$value"
			found=true
		fi
		echo "$line" >> "$temp"
	done < "$file"
	$found || echo "$key=$value" >> "$temp"
	cat "$temp" > "$file"
	rm "$temp"
}

_load-var() {
	local key="$1"; shift
	local file="$1"; shift
	local find="^[[:space:]]*$key=\"?([^\"]*)\"?"
	local line
	while IFS= read -r line; do
		if [[ $line =~ $find ]]; then
			echo "${BASH_REMATCH[1]}"
			return
		fi
	done < "$file"
	return 1
}

# insert/update a section in a file
_section() {
	local name="$1"; shift # section name
	local file="$1"; shift # file to write
	local ins="$(cat)"     # content to insert (stdin)
	local temp="$(mktemp)"
	local start="# [$name:START]" # section start marker
	local end="# [$name:END]"     # section end marker
	local ctx=0 # context
	local line
	while IFS= read -r line; do
		case $ctx in
		0) # before the section
			echo "$line" >> "$temp"
			[ "$line" = "$start" ] || continue
			echo "$ins" >> "$temp"
			ctx=1
			;;
		1) # in the section
			[ "$line" = "$end" ] || continue
			echo "$line" >> "$temp"
			ctx=2
			;;
		2) # after the section
			echo "$line" >> "$temp"
			;;
		esac
	done < "$file"

	case $ctx in
	0) # section not found
		echo >> "$temp"
		echo "$start" >> "$temp"
		echo "$ins" >> "$temp"
		echo "$end" >> "$temp"
		;;
	1) # end marker missing
		echo "$end" >> "$temp"
		;;
	esac

	cat "$temp" > "$file"
	rm "$temp"
}
